 Database: to store and manupulate data.
 
2 types 
SQL  and non SQL


sql is structured query language, eg postgres mysql

non sql is without query ans stores like objects. eg mongo db


postgres: 
relational database management system

sql (ANSI - sandard)
general purpose
object-relational databases
free and open sourced
platform independednd
very stable and minimum maintainance
large storage
extensible define own datatypes ,




in cmd ---> to enter postgres 

psql -U postgres 
password


to create a database 
--> CREATE DATABASE database_name;

to get into database 
--> \c database_name

table creation 
--> CREATE TABLE table_name (fields);

eg : CREATE TABLE work (id INT, name VARCHAR(50));

to show tables in a database
--> \d

to show specific table
--> \d table_name

to delete a table
--> DROP TABLE table_name;


table with constrains 
--> CREATE TABLE table_name (id BIGSERIAL NOT NULL PRIMARY KEY ,name VARCHAR(50) NOT NULL, date_of_birth DATE );

* BIGSERIAL = autoincrement by 1
* NOT NULL  = field not be empty
* UNIQUE    = values in the field must be UNIQUE.

output: 

Schema |       Name       |   Type   |  Owner
--------+------------------+----------+----------
 public | employees        | table    | postgres
 public | employees_id_seq | sequence | postgres

data insertion into tables:
--> INSERT INTO table_name (column_name,,,,) VALUES (data,,,);

INSERT INTO students(name,email) VALUES('shahid','shaahid@example.com')

to see inserted data:
--> SELECT * FROM table_name;

to see specific data:
--> SELECT name,email FROM students;


list by order:
--> SELECT * FROM table_name ORDER BY column_name_to_order_by ASC;

ASC for asenting
DESC decenting ORDER


to avoid repeatation or duplicates when showing data:
--> SELECT DISTINCT column_name FROM table_name;


to add extra column:
--> ALTER TABLE table_name ADD column_name datatype(constrains);

ALTER TABLE students ADD grades INT(NOT NULL);

to update data or add new data:
--> UPDATE table_name SET column_name = 'value' WHERE id IN (1,2,3);  

here id uses to identify which column and in 1,2,3 s datas have being changed to value.ABORT

to fetch data with condition:
--> SELECT * FROM table_name WHERE gender = 'male';

here WHERE keyword is used

to add multiple condition 
--> SELECT * FROM table_name WHERE gender = 'male' AND date_of_birth <= '1999-01-01";

here uses AND keyword with WHERE keyword.ABORT

we can use OR condition to fetch data when one of the condition is true.ABORT

--> relational operators :
>,<,>=,<=,

we can use relational operators in conditions.

limit / fetch keyword .

for exmaple it is uses to get first 5 datas or starting from id 5 and get next 5 datas.

limit keyword to retrive datas of given limit.ABORT
--> SELECT * FROM table_name LIMIT 5;

OFFSET:
--> SELECT * FROM table_name OFFSET 5 LIMIT 5;

here starts from 5 and get next 5 data.

we can also use FETCH do the same in this way:
--> SELECT * FROM table_name OFFSET 5 FETCH FIRST 5 ROWS ONLY;

IN keyword (from a list):

to get data of specific column using their values 
for example:
SELECT * FROM students WHERE name IN ('John', 'Alice', 'Bob');
Find all students whose names are "John", "Alice", or "Bob":

BETWEEN keyword:
--> SELECT * FROM table_name WHERE column_name BETWEEN 'value1' AND 'value2';

LIKE and iLIKE :
used to get specific pattern type

--> SELECT * FROM table_name WHERE column_name LIKE '%a';

'%a' = it means ends with a . for example in column name it gets names thats ends with a.
'a%' =  means starts with a. 

iLIKE is used when it comes to case senstive. 


GROUP BY 

- use with aggrigate functions
- use to group 

-  SELECT column1, column2, aggregate_function(column3) FROM table_name GROUP BY column1, column2;

aggrigate functions are :

COUNT()
SUM()   - SELECT SUM(salary) FROM employees;
AVG()   - SELECT AVG(salary) FROM employees;  - avg
ROUND() - SELECT ROUND(AVG(salary)) FROM employees; - average rounded figure.
MAX()   - SELECT MAX(salary) FROM employees;
MIN()   - SELECT MIN(salary) FROM employees;


- SELECT place,COUNT(*) FROM employees GROUP BY place ;
- can put a ORDER BY in the end.

HAVING :
checking condition and retrive data.

- SELECT place,COUNT(*) FROM employees GROUP BY place HAVING COUNT(*) > 1 ORDER BY place;

The :: operator in SQL (commonly seen in PostgreSQL) is the type cast operator. It is used to explicitly convert a value or column from one data type to another.

value::datatype
SELECT '2025-01-01'::DATE AS date_value;

arithemtic operations:
- SELECT id,name,mark,total(mark::float/total)*100 FROM students;

ALIAS:
is to give a name to column or a field.
AS keyword 
- SELECT id,name,mark,total(mark::float/total)*100 AS percentage FROM students;

COALESCE :

-  IT is used to give default value if the rows are empty.

- SELECT id,name,mark,COALESCE(email, 'default value') FROM students;

DATE FUNCTION :

- SELECT NOW()::DATE;  //for date.
- SELECT NOW()::TIME;  //for time.
- SELECT EXTRACT (year FROM NOW()); // can extract month,day,century.

to add years or anything :

SELECT NOW() + INTERVAL '10 YEARS';


CONSTRAINS :
1- NOT NULL
2- UNIQUE
3- PRIMARY KEY
4- FOREIGN KEY - TO RELATE 2 TABLES.
5- CHECK
6- DEFAULT

define CONSTRAINS:

can apply constrains in 2 ways

> on creation:
CREATE TABLE table_name (id INT PRIMARY KEY , name VARCHAR(100) NOT NULL, gender VARCHAR(10) CHECK(gender='male' or gender='female'));

> after creation:
- ALTER TABLE table_name ADD CONSTRAINT name  PRIMARY KEY(id);
- ALTER TABLE table_name ALTER COLUMN name SET NOT NULL;


DELETE:

to delete a record. 
- DELETE FROM table_name WHERE id=1;

- DELETE FROM table_name ;  // to delete all record. 

HANDLE CONFLICTS. UPSERT QUERY.
like primary key duplication.

handling conflicts during an INSERT operation is made easy with the UPSERT feature, which combines INSERT and UPDATE in a single query. This is done using the ON CONFLICT clause.

- INSERT INTO table_name (columns) VALUES (values) ON CONFLICT (conflict_target) DO UPDATE SET column1 = value1, column2 = value2;

-INSERT INTO students (name, mark) VALUES ('Alice', 85) ON CONFLICT (name) DO UPDATE SET mark = EXCLUDED.mark;
EXCLUDED: Refers to the values provided in the INSERT statement that caused the conflict.


- If you want to ignore the insert in case of a conflict:

INSERT INTO students (name, mark)VALUES ('Alice', 85)ON CONFLICT (name)DO NOTHING;

FOREIGN KEY:
- A foreign key is a column (or a group of columns) in a table that establishes a link between data in two tables. It ensures referential integrity, meaning the values in the foreign key column must match values in the referenced tables primary key or unique column.
To enforce relationships between tables.

JOINS:
to combine 2 tables.

- CREATE TABLE table_name (
    column_name data_type CONSTRAINT constraint_name REFERENCES parent_table (parent_column)
);


- ALTER TABLE table_name ADD CONSTRAINT constraint_name FOREIGN KEY (column_name) REFERENCES parent_table (parent_column);

eg:

CREATE TABLE departments (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    department_id INT,
    CONSTRAINT fk_department FOREIGN KEY (department_id) REFERENCES departments (id)
);


- ALTER TABLE employees ADD CONSTRAINT fk_department FOREIGN KEY (department_id) REFERENCES departments (id);

INNER JOIN:
combine data, to fetch matching data from 2 tables. 

- SELECT column_names FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;

EG: 
- SELECT employees.name AS employee_name, departments.department_name FROM employees INNER JOIN departments ON employees.department_id =departments.id;



LEFT JOIN:

- A LEFT JOIN in SQL retrieves all rows from the left table and the matching rows from the right table. If there is no match in the right table, the result will still include the row from the left table, but with NULL values for the columns from the right table.

- SELECT column_names FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;

RIGHT JOIN:

- A RIGHT JOIN in SQL retrieves all rows from the right table and the matching rows from the left table. If there is no match in the left table, the result will still include the row from the right table, but with NULL values for the columns from the left table.

- SELECT column_names FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;


FULL OUTER JOIN:

-A FULL OUTER JOIN combines the results of both a LEFT JOIN and a RIGHT JOIN. It retrieves:

All rows from the left table, even if there is no match in the right table.
All rows from the right table, even if there is no match in the left table.
For rows without a match, the missing side will have NULL values.

- SELECT column_names FROM table1 FULL OUTER JOIN table2 ON table1.column_name = table2.column_name;

UNION:

-The UNION operator in SQL is used to combine the result sets of two or more SELECT statements into a single result set. By default, it removes duplicate rows from the combined result.

Key Rules for UNION:

- Same Number of Columns: The SELECT statements must have the same number of columns.
- Compatible Data Types: The data types of the columns must be compatible.
- Column Order: The columns in the result set are based on the first SELECT statement.

-  SELECT column_names FROM table1 UNION SELECT column_names FROM table2;

To include duplicates in the result, use UNION ALL:

- SELECT column_names FROM table1 UNION ALL SELECT column_names FROM table2;

CASE:

- The CASE statement in SQL is used to create conditional logic in queries. It acts like an "if-then-else" structure, allowing you to evaluate conditions and return specific values based on those conditions.

- SELECT name, marks, CASE 
        WHEN marks >= 90 THEN 'A+'
        WHEN marks >= 80 THEN 'A'
        WHEN marks >= 70 THEN 'B+'
        WHEN marks >= 60 THEN 'B'
        WHEN marks >= 50 THEN 'C'
        WHEN marks >= 40 THEN 'D'
        ELSE 'F'
    END AS grade
FROM students;
